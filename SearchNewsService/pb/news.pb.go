// Code generated by protoc-gen-go. DO NOT EDIT.
// source: news.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type News struct {
	Id       string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title    string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content  string   `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Author   string   `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	NewsType string   `protobuf:"bytes,5,opt,name=news_type,json=newsType" json:"news_type,omitempty"`
	Tags     []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *News) Reset()                    { *m = News{} }
func (m *News) String() string            { return proto.CompactTextString(m) }
func (*News) ProtoMessage()               {}
func (*News) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *News) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *News) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *News) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *News) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *News) GetNewsType() string {
	if m != nil {
		return m.NewsType
	}
	return ""
}

func (m *News) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type PostNewsRequest struct {
	Title    string   `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Content  string   `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Author   string   `protobuf:"bytes,4,opt,name=author" json:"author,omitempty"`
	NewsType string   `protobuf:"bytes,5,opt,name=news_type,json=newsType" json:"news_type,omitempty"`
	Tags     []string `protobuf:"bytes,6,rep,name=tags" json:"tags,omitempty"`
}

func (m *PostNewsRequest) Reset()                    { *m = PostNewsRequest{} }
func (m *PostNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*PostNewsRequest) ProtoMessage()               {}
func (*PostNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PostNewsRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PostNewsRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PostNewsRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *PostNewsRequest) GetNewsType() string {
	if m != nil {
		return m.NewsType
	}
	return ""
}

func (m *PostNewsRequest) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type PostNewsResponse struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *PostNewsResponse) Reset()                    { *m = PostNewsResponse{} }
func (m *PostNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*PostNewsResponse) ProtoMessage()               {}
func (*PostNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PostNewsResponse) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type GetNewsRequest struct {
	NewsType string `protobuf:"bytes,1,opt,name=news_type,json=newsType" json:"news_type,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *GetNewsRequest) Reset()                    { *m = GetNewsRequest{} }
func (m *GetNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewsRequest) ProtoMessage()               {}
func (*GetNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GetNewsRequest) GetNewsType() string {
	if m != nil {
		return m.NewsType
	}
	return ""
}

func (m *GetNewsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetNewsResponse struct {
	News *News `protobuf:"bytes,1,opt,name=news" json:"news,omitempty"`
}

func (m *GetNewsResponse) Reset()                    { *m = GetNewsResponse{} }
func (m *GetNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNewsResponse) ProtoMessage()               {}
func (*GetNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetNewsResponse) GetNews() *News {
	if m != nil {
		return m.News
	}
	return nil
}

type GetAllNewsRequest struct {
	NewsType string `protobuf:"bytes,1,opt,name=news_type,json=newsType" json:"news_type,omitempty"`
	Skip     int32  `protobuf:"varint,2,opt,name=skip" json:"skip,omitempty"`
	Take     int32  `protobuf:"varint,3,opt,name=take" json:"take,omitempty"`
}

func (m *GetAllNewsRequest) Reset()                    { *m = GetAllNewsRequest{} }
func (m *GetAllNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllNewsRequest) ProtoMessage()               {}
func (*GetAllNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetAllNewsRequest) GetNewsType() string {
	if m != nil {
		return m.NewsType
	}
	return ""
}

func (m *GetAllNewsRequest) GetSkip() int32 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *GetAllNewsRequest) GetTake() int32 {
	if m != nil {
		return m.Take
	}
	return 0
}

type GetAllNewsResponse struct {
	Allnews []*News `protobuf:"bytes,1,rep,name=allnews" json:"allnews,omitempty"`
}

func (m *GetAllNewsResponse) Reset()                    { *m = GetAllNewsResponse{} }
func (m *GetAllNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllNewsResponse) ProtoMessage()               {}
func (*GetAllNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *GetAllNewsResponse) GetAllnews() []*News {
	if m != nil {
		return m.Allnews
	}
	return nil
}

type SearchNewsRequest struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Skip  int32  `protobuf:"varint,2,opt,name=skip" json:"skip,omitempty"`
	Take  int32  `protobuf:"varint,3,opt,name=take" json:"take,omitempty"`
}

func (m *SearchNewsRequest) Reset()                    { *m = SearchNewsRequest{} }
func (m *SearchNewsRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchNewsRequest) ProtoMessage()               {}
func (*SearchNewsRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *SearchNewsRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchNewsRequest) GetSkip() int32 {
	if m != nil {
		return m.Skip
	}
	return 0
}

func (m *SearchNewsRequest) GetTake() int32 {
	if m != nil {
		return m.Take
	}
	return 0
}

type SearchNewsResponse struct {
	Allnews []*News `protobuf:"bytes,1,rep,name=allnews" json:"allnews,omitempty"`
}

func (m *SearchNewsResponse) Reset()                    { *m = SearchNewsResponse{} }
func (m *SearchNewsResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchNewsResponse) ProtoMessage()               {}
func (*SearchNewsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *SearchNewsResponse) GetAllnews() []*News {
	if m != nil {
		return m.Allnews
	}
	return nil
}

func init() {
	proto.RegisterType((*News)(nil), "pb.News")
	proto.RegisterType((*PostNewsRequest)(nil), "pb.PostNewsRequest")
	proto.RegisterType((*PostNewsResponse)(nil), "pb.PostNewsResponse")
	proto.RegisterType((*GetNewsRequest)(nil), "pb.GetNewsRequest")
	proto.RegisterType((*GetNewsResponse)(nil), "pb.GetNewsResponse")
	proto.RegisterType((*GetAllNewsRequest)(nil), "pb.GetAllNewsRequest")
	proto.RegisterType((*GetAllNewsResponse)(nil), "pb.GetAllNewsResponse")
	proto.RegisterType((*SearchNewsRequest)(nil), "pb.SearchNewsRequest")
	proto.RegisterType((*SearchNewsResponse)(nil), "pb.SearchNewsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NewsService service

type NewsServiceClient interface {
	PostNews(ctx context.Context, in *PostNewsRequest, opts ...grpc.CallOption) (*PostNewsResponse, error)
	GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsResponse, error)
	GetAllNews(ctx context.Context, in *GetAllNewsRequest, opts ...grpc.CallOption) (*GetAllNewsResponse, error)
	SearchNews(ctx context.Context, in *SearchNewsRequest, opts ...grpc.CallOption) (*SearchNewsResponse, error)
}

type newsServiceClient struct {
	cc *grpc.ClientConn
}

func NewNewsServiceClient(cc *grpc.ClientConn) NewsServiceClient {
	return &newsServiceClient{cc}
}

func (c *newsServiceClient) PostNews(ctx context.Context, in *PostNewsRequest, opts ...grpc.CallOption) (*PostNewsResponse, error) {
	out := new(PostNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/PostNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsResponse, error) {
	out := new(GetNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/GetNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) GetAllNews(ctx context.Context, in *GetAllNewsRequest, opts ...grpc.CallOption) (*GetAllNewsResponse, error) {
	out := new(GetAllNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/GetAllNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsServiceClient) SearchNews(ctx context.Context, in *SearchNewsRequest, opts ...grpc.CallOption) (*SearchNewsResponse, error) {
	out := new(SearchNewsResponse)
	err := grpc.Invoke(ctx, "/pb.NewsService/SearchNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NewsService service

type NewsServiceServer interface {
	PostNews(context.Context, *PostNewsRequest) (*PostNewsResponse, error)
	GetNews(context.Context, *GetNewsRequest) (*GetNewsResponse, error)
	GetAllNews(context.Context, *GetAllNewsRequest) (*GetAllNewsResponse, error)
	SearchNews(context.Context, *SearchNewsRequest) (*SearchNewsResponse, error)
}

func RegisterNewsServiceServer(s *grpc.Server, srv NewsServiceServer) {
	s.RegisterService(&_NewsService_serviceDesc, srv)
}

func _NewsService_PostNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).PostNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/PostNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).PostNews(ctx, req.(*PostNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_GetAllNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).GetAllNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/GetAllNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).GetAllNews(ctx, req.(*GetAllNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NewsService_SearchNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NewsServiceServer).SearchNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NewsService/SearchNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NewsServiceServer).SearchNews(ctx, req.(*SearchNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NewsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NewsService",
	HandlerType: (*NewsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostNews",
			Handler:    _NewsService_PostNews_Handler,
		},
		{
			MethodName: "GetNews",
			Handler:    _NewsService_GetNews_Handler,
		},
		{
			MethodName: "GetAllNews",
			Handler:    _NewsService_GetAllNews_Handler,
		},
		{
			MethodName: "SearchNews",
			Handler:    _NewsService_SearchNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "news.proto",
}

func init() { proto.RegisterFile("news.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x53, 0x3d, 0x6f, 0xe2, 0x40,
	0x10, 0xc5, 0xc6, 0xe6, 0x63, 0x90, 0xe0, 0x18, 0x38, 0x64, 0x71, 0x57, 0xa0, 0xad, 0xa8, 0xb8,
	0x13, 0x89, 0x94, 0x34, 0x14, 0xa9, 0xe8, 0xa2, 0xc4, 0xa4, 0x48, 0x17, 0x19, 0x18, 0x05, 0x0b,
	0xcb, 0x36, 0xde, 0x25, 0x88, 0xbf, 0x90, 0x26, 0xff, 0x37, 0x55, 0xe4, 0x5d, 0x1b, 0x58, 0xd3,
	0x90, 0x2a, 0xdd, 0xce, 0x9b, 0x79, 0xfb, 0xde, 0xbe, 0xb1, 0x01, 0x42, 0xda, 0xf1, 0x51, 0x9c,
	0x44, 0x22, 0x42, 0x33, 0x9e, 0xb3, 0x0f, 0x03, 0xac, 0x7b, 0xda, 0x71, 0x6c, 0x82, 0xe9, 0x2f,
	0x1d, 0x63, 0x60, 0x0c, 0xeb, 0xae, 0xe9, 0x2f, 0xb1, 0x0b, 0xb6, 0xf0, 0x45, 0x40, 0x8e, 0x29,
	0x21, 0x55, 0xa0, 0x03, 0xd5, 0x45, 0x14, 0x0a, 0x0a, 0x85, 0x53, 0x96, 0x78, 0x5e, 0x62, 0x0f,
	0x2a, 0xde, 0x56, 0xac, 0xa2, 0xc4, 0xb1, 0x64, 0x23, 0xab, 0xf0, 0x0f, 0xd4, 0x53, 0xc9, 0x17,
	0xb1, 0x8f, 0xc9, 0xb1, 0x65, 0xab, 0x96, 0x02, 0x4f, 0xfb, 0x98, 0x10, 0xc1, 0x12, 0xde, 0x2b,
	0x77, 0x2a, 0x83, 0xf2, 0xb0, 0xee, 0xca, 0x33, 0x7b, 0x37, 0xa0, 0xf5, 0x10, 0x71, 0x91, 0xba,
	0x72, 0x69, 0xb3, 0x25, 0x2e, 0x7e, 0xce, 0xcc, 0x7f, 0xf8, 0x75, 0xf4, 0xc2, 0xe3, 0x28, 0xe4,
	0x84, 0x7f, 0xc1, 0x4a, 0x39, 0x32, 0xab, 0xc6, 0xb8, 0x36, 0x8a, 0xe7, 0x23, 0xd9, 0x97, 0x28,
	0x9b, 0x40, 0x73, 0x4a, 0x9a, 0x79, 0x4d, 0xd4, 0x28, 0x88, 0xaa, 0xd8, 0xcd, 0x3c, 0x76, 0xf6,
	0x0f, 0x5a, 0x07, 0xfa, 0x45, 0x7a, 0xcf, 0xd0, 0x9e, 0x92, 0xb8, 0x0b, 0x82, 0x8b, 0x25, 0x11,
	0x2c, 0xbe, 0xf6, 0x63, 0x29, 0x6a, 0xbb, 0xf2, 0xac, 0xde, 0xbe, 0x26, 0x99, 0xa3, 0xed, 0xca,
	0x33, 0xbb, 0x05, 0x3c, 0xbd, 0x39, 0x73, 0xc3, 0xa0, 0xea, 0x05, 0x41, 0x66, 0xa8, 0xac, 0x19,
	0xca, 0x1b, 0xec, 0x11, 0xda, 0x33, 0xf2, 0x92, 0xc5, 0xaa, 0xb0, 0xc3, 0xcd, 0x96, 0x92, 0x7d,
	0xe6, 0x47, 0x15, 0xdf, 0x31, 0x73, 0x7a, 0xe5, 0xe5, 0x66, 0xc6, 0x9f, 0x06, 0x34, 0x52, 0x64,
	0x46, 0xc9, 0x9b, 0xbf, 0x20, 0xbc, 0x81, 0x5a, 0xbe, 0x52, 0xec, 0xa4, 0xe3, 0x85, 0x8f, 0xad,
	0xdf, 0xd5, 0x41, 0x25, 0xc5, 0x4a, 0x78, 0x0d, 0xd5, 0x6c, 0x35, 0x88, 0xe9, 0x88, 0xbe, 0xe6,
	0x7e, 0x47, 0xc3, 0x0e, 0xac, 0x09, 0xc0, 0x31, 0x45, 0xfc, 0x9d, 0x0d, 0xe9, 0xfb, 0xea, 0xf7,
	0x8a, 0xf0, 0x29, 0xfd, 0xf8, 0x6e, 0x45, 0x3f, 0x8b, 0x56, 0xd1, 0xcf, 0xe3, 0x61, 0xa5, 0x79,
	0x45, 0xfe, 0xe9, 0x57, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x15, 0x8f, 0x0d, 0xf7, 0x03,
	0x00, 0x00,
}
